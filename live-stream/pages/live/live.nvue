<template>
	<view class="flex-1">
		<!-- video默认就是在屏幕的中间部分 所以不需要给定位置 -->
		   <video :src="src" autoplay controls="false" class="flex-1"></video>
		   
		   <!-- 头部 -->
		   <view style="position: fixed;left: 0;right: 0;" :style="'top:' + statusBarHeight + 'px'">
			   <!-- 个人信息|观看详细信息 -->
			   <view style="height: 80rpx;" class="px-2 flex justify-between align-center">
				   <view style="width:325rpx;background-color: rgba(0,0,0,0.4);" class="flex rounded-circle">
					   
					   <view class="p">
						   <image :src="detail.user.avatar || '../../static/beijing2.jpg'" style="width: 70rpx; height: 70rpx;" class="rounded-circle"></image>
					   </view>
					   <view class="flex-1 flex flex-column justify-center">
						   <text class="text-white font">{{ detail.user.username}}</text>
						   <text class="text-white font-sm">{{ detail.user.look_count }}</text>
					   </view>
					   <view class="ml-3">
						   <view class="rounded-circle flex align-center justify-center bg-danger" style="width: 70rpx;height:70rpx;">
						   	<text class="text-white">+</text>
						   </view>
					   </view>
				   </view>
				   
				   <view style="width: 325rpx;background-color: rgba(0,0,0,0.4);" class="flex rounded-circle">
					   <!-- 实时在线观看用户情况 -->
					   <scroll-view scroll-x="true" class="flex-1 flex">
						   <view class="p" v-for="(item, index) in list" :key="index">
							   <image class="rounded-circle" :src="item.avatar || '/static/tabbar/min.png'" style="width: 70rpx;height: 70rpx;"></image>
						   </view>
					   </scroll-view>
					   <view class="p">
					   	<view class="rounded-circle flex align-center justify-center bg-main" style="width: 70rpx;height: 70rpx;">
							<!-- align-center justify-center 调节这两个属性使之text在view中水平垂直都居中 达到在中间的效果 -->
							<!-- 实时在线观看人数 -->
							<text class="text-white font-sm">{{ list.length }}</text>
						</view>
					   </view>
				   </view>
			   </view>
			   
			   <!-- 金币 -->
			   <view style="height: 80rpx;" class="px-2 my-2">
				  <view style="width: 325rpx; background-color: rgba(0,0,0,0.4);" class="flex rounded-circle align-center">
					  <view class="p">
						  <text class="text-warning">金币</text>
					  </view>
					  <view class="flex-1 flex flex-column justify-center">
						  <text class="text-white font">{{ detail.coin }}</text>
					  </view>
				  </view>
			   </view>
			   
			   
			   <!-- 收到礼物 -->
				 <f-gift ref="gift"></f-gift>
		   </view>
		   
		   <!-- 弹幕区-->
		<f-danmu ref="danmu"></f-danmu>
		   
<!-- 底部 -->
  <view style="height: 120rpx;" class="flex align-center justify-between fixed-bottom">
   <view class="px-2">
    <view class="btn px-3" @click="openInput">
     <text class="text-white font">说点什么...</text>
    </view>
   </view>
   <view class="flex align-center">
    <view class="btn btn-icon">
     <text class="iconfont text-white" style="font-size: 40px;">&#xe633;</text>
    </view>
    <view class="btn btn-icon bg-warning" @click="openGift">
     <text class="iconfont">&#xe67c;</text>
    </view>
    <view class="btn btn-icon">
     <text class="iconfont text-white">&#xe7cd;</text>
    </view>
    <view class="btn btn-icon" @click="back">
     <text class="iconfont text-white">&#xe607;</text>
    </view>
   </view>
  </view>
 <!-- 输入弹出框 -->
  <uni-popup type="bottom" ref="input">
   <view class="bg-white flex align-center px-3" style="height: 120rpx;">
    <input type="text" style="height: 80rpx;" v-model="content" class="border rounded flex-1 px-3 font-md" placeholder="说点什么..." />
    <view class="flex align-center justify-center py-2 px-2 ml-3 rounded"
      @click="submit" :class="content === '' ? 'bg-main-disabled' : 'bg-main' ">
     <text class="font text-white">发送</text>
    </view>
   </view>
  </uni-popup>
  
  <!-- 送出礼物弹出层 -->
  <uni-popup type="bottom" ref="giftPopup">
	  <view class="bg-white" style="width: 750rpx;height: 550rpx;">
		  <view style="height: 100rpx;" class="flex justify-between align-center">
			  <text class="text-main font-md ml-3">礼物</text>
			  <view class="flex align-center justify-center" style="width:100rpx;width: 100rpx;" @click="closeGift">
				  <text class="iconfont">&#xe607;</text>
			  </view>
		  </view>
		  <swiper :indicator-dots="true" :duration="500" style="height: 350rpx;" class="border-bottom border-top">
			  <swiper-item>
				  <view class="flex flex-wrap">
					  <view style="width: 187rpx; height: 175rpx;" class="flex flex-column justify-center align-center"
					  v-for="(item,index) in gifts"
					  :key="index" :class="giftActiveId === item.id ? ' border border-main': ''"
					  @click="giftActiveId = item.id">
					  <image :src="item.image" style="width:70rpx;height:70rpx;" class="rounded"></image>
					  <view class="flex mt-1">
						  <text class="text-warning font mr-1">{{item.name}}</text>
						  <text class="text-secondary font">{{item.coin}}</text>
					  </view>
					  </view>
				  </view>
			  </swiper-item>
		  </swiper>
		  <view style="height: 100rpx;" class="flex align-center justify-end">
			  <view class="flex align-center justify-center py-2 px-2 mr-3 rounded bg-warning" @click="openCoin">
				  <text class="font">充值</text>
			  </view>
			  <view class="flex align-center justify-center py-2 px-2 mr-3 rounded bg-main" @click="sendGift">
				  <text class="font text-white">发送</text>
			  </view>
		  </view>
	  </view>
  </uni-popup>
</view>
</template>

<script>
	import fGift from '@/components/live/f-gift.vue';
	import fDanmu from '@/components/live/f-danmu.vue';
	import uniPopup from '@/components/uni-ui/uni-popup/uni-popup.vue';
	import myGifts from '@/common/gifts.js';
	import $H from '@/common/request.js';
	import $C from '@/common/config.js';
	import { mapState } from 'vuex';
	export default {
		components:{
			fGift,fDanmu,uniPopup
		},
		mounted() {
			//送礼物演示
			// setInterval(() => {
			// 	this.$refs.gift.send({
			// 		username: '侯粤嘉',
			// 		avatar: '',
			// 		git_name: '蛋糕',
			// 		git_image: '/static/gift/3.png',
			// 		num: 1
			// 	})
			// },3000)
		},
		data() {
			return {
				id: 0,
				detail: {
					created_time: '',
					id: 1,
					title: '',
					cover: '',
					user_id: 0,
					look_count: 0,
					coin: 0,
					key: '',
					status: 0,
					userId: 0,
					user: {
						id: 0,
						username: '',
						avatar: ''
					}
				},
				sign: '',
				statusBarHeight: 0,
				content:'',
				gifts: [],
				giftActiveId: 0,
				//在线用户列表
				list: []
			};
		},
		mounted() {
			// 加入直播间
			this.joinOrLeaveLive('join')
		},
		// 页面销毁
		destroyed() {
			// 离开直播间
			this.joinOrLeaveLive('leave');
			// 移除全局事件
			uni.$off('live', this.handleLiveEvent);
		},
		onLoad(option) {
			this.id = option.id
			// console.log(this.id);
			let res = uni.getSystemInfoSync()
			this.statusBarHeight = res.statusBarHeight
			// 把礼物js中的数据赋值给礼物数组
			this.gifts = myGifts
			// 请求后端接口，获取该直播间详情数据，包括主播信息，和直播间的签名等数据
			$H.get('/live/read/' + this.id).then(res => {
				// 定义一个和res.data一样结构的返回结果 然后就可以直接赋值
				// console.log(res);
				this.detail = res.data
				// console.log(this.detail);
				this.sign = res.sign;
			});
			
			// 请求礼物列表接口
			$H.get('/gift/list').then(res => {
				// console.log('打印看礼物数据');
				// console.log(res);
				this.gifts = res.map(item => {
					item.image = $C.imgUrl + item.image
					return item
				})
			})
			// 监听全局事件
			uni.$on('live', this.handleLiveEvent);
		},
		computed:{
			src() {
				if(this.detail.key == '' || this.sign == ''){
					return '';
				}
				return `https://mylive.utools.club/live/${this.detail.key}.flv?sign=${this.sign}`;
			},
			...mapState({
				socket: state => state.socket,
				token: state => state.token
			})
		},
		methods:{
			// 处理直播间事件
			handleLiveEvent(e){
				console.log(123123);
				console.log(e);
				let d = e.data;
				switch (e.type) {
					case 'online':
					if(d.action === 'join') {
						this.list = d.data;
					}
					if(d.action === 'leave') {
						this.list = d.data
					}
					break;
					case 'comment':
					this.$refs.danmu.send({
						id: d.id,
						name: d.user.name,
						content: d.content
					})
					this.content = ''
					this.$refs.input.close()
					break;
					case 'gift':
					this.$refs.gift.send({
						username: d.username,
						gift_name: d.gift_name,
						gift_image: d.gift_image,
						num: d.num
					})
					break;
				default:
					break;
				}
			},
			// 加入或离开直播间
			joinOrLeaveLive(type) {
				if(this.socket && this.token) {
					this.socket.emit(type + 'Live', {
						live_id: this.id,
						token: this.token
					});
				}
			},
			// 打开送礼物框
			openGift() {
				this.$refs.giftPopup.open()
			},
			// 关闭送礼物框
			closeGift() {
				this.$refs.giftPopup.close()
			},
			// 进行送礼物操作
			sendGift() {
				if (this.giftActiveId === 0) {
					return uni.showToast({
						title:'请选择要发送的礼物',
						icon:'none'
					});
				}
				let index = this.gifts.findIndex(item => item.id === this.giftActiveId)
				if (index === -1) {
					return
				}
				
				let g = this.gifts[index]
				
				if(!this.token && !this.socket) {
					uni.navigateTo({
						url:'../login/login'
					});
					return uni.showToast({
						title: '请先登录',
						icon: 'none'
					});
				}
				// console.log(g);
				
				if(this.socket) {
					this.socket.emit('gift', {
						live_id: this.id,
						gift_id: g.id,
						token: this.token
					});
				}
				this.closeGift()
			},
			// 跳转到充值页面
			openCoin() {
				uni.navigateTo({
					url:'../coin/coin'
				})
			},
			// 打开输入弹幕的对话框
			openInput() { 
				this.$store.dispatch('authMethod', () => {
					this.$refs.input.open()
				})
				// this.$refs.input.open()
			},
			// 提交发送弹幕信息
			submit(){
				if (this.content === '') {
					return uni.showToast({
						title: '评论内容不能为空',
						icon: 'none'
					});
				}
				if(!this.token && !this.socket) {
					uni.navigateTo({
						url:'../login/login'
					});
					return uni.showToast({
						title:'请先登录',
						icon:'none'
					});
				}
				
				if(this.socket) {
					this.socket.emit('comment', {
						live_id: this.id,
						data: this.content,
						token: this.token
					})
				}
			},
			//返回上一层
			back() {
			 	uni.navigateBack({
					delta: 1
				});
		   }
		}
	}
</script>

<style scoped>
.btn{
	height: 80rpx;
	border-radius: 100rpx;
	background-color: rgba(255,255,255,0.12);
	align-items: center;
	justify-content: center;
}
.btn-icon{
	width: 80rpx;
	margin-right: 20rpx;
}

</style>
